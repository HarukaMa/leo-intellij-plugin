/*
 * Copyright (c) 2022-2023 Haruka Ma
 * This file is part of Leo / Aleo IntelliJ plugin.
 *
 * Leo / Aleo IntelliJ plugin is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Leo / Aleo IntelliJ plugin is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Leo / Aleo IntelliJ plugin. If not, see <https://www.gnu.org/licenses/>.
 */

//noinspection BnfSuspiciousTokenForFile
{
  parserClass="im.mrx.leolanguage.aleo.AleoParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Aleo"
  psiImplClassSuffix="Impl"
  psiPackage="im.mrx.leolanguage.aleo.psi"
  psiImplPackage="im.mrx.leolanguage.aleo.psi.impl"

  elementTypeHolderClass="im.mrx.leolanguage.aleo.psi.AleoTypes"
  elementTypeClass="im.mrx.leolanguage.aleo.psi.AleoElementType"
  tokenTypeClass="im.mrx.leolanguage.aleo.psi.AleoTokenType"

  tokens = [
    keyword = "regexp:const|constant|public|private|address|boolean|field|group|i8|i16|i32|i64|i128|u8|u16|u32|u64|u128|scalar|string|true|false|input|output|as|into|record|owner|function|struct|closure|program|aleo|self|storage|mapping|key|value|global|block|return|break|assert|continue|let|if|else|while|for|switch|case|default|match|enum|union|trait|impl|type"
    instruction_name = "regexp:cast|call|abs|abs\.w|double|inv|neg|not|square|sqrt|hash\.bhp256|hash\.bhp512|hash\.bhp768|hash\.bhp1024|hash\.ped64|hash\.ped128|hash\.psd2|hash\.psd4|hash\.psd8|hash_many\.psd2|hash_many\.psd4|hash_many\.psd8|add|add\.w|sub|sub\.w|mul|mul\.w|div|div\.w|rem|rem\.w|mod|pow|pow\.w|shl|shl\.w|shr|shr\.w|and|or|xor|nand|nor|gt|gte|lt|lte|is\.eq|is\.neq|commit\.bhp256|commit\.bhp512|commit\.bhp768|commit\.bhp1024|commit\.ped64|commit\.ped128|ternary|assert.eq|assert.neq|contains|get|get\.or_use|set|remove|rand\.chacha|position|branch\.eq|branch\.neq"
    entry_visibility = "regexp:public|private|constant"
    address_literal = "regexp:aleo1[ac-hj-np-z02-9]{58}"
    boolean_literal = "regexp:true|false"
    register = "regexp:r[0-9]+"
    lowercase_identifier = "regexp:[a-z_][a-z0-9_]*"
    identifier = "regexp:[A-Za-z_][A-Za-z0-9_]*"
    string_literal = "regexp:\"([\x00-\x21\x23-\x5b\u005d-\uffff]|\\\"|\\\\)*\""
    arithmetic_literal = "regexp:-?[0-9_]+([ui](8|16|32|64|128)|field|group|scalar)"
    numeral = "regexp:[0-9]+"
    line_comment = "regexp://.*"
    block_comment = "regexp:(/[*](?:[^*]|[*][^/])*[*]/)"

    brackets = "regexp:[\[\]]"
    semicolon = ";"
    colon = ":"
    dot = "."
    slash = "/"
    as = "as"
  ]
}

program ::= import* "program" program_id ";" definition* { pin = 2 }


definition ::= mapping | struct | record | function | transition { recoverWhile = definition_recover }

private definition_recover ::= !( 'closure' | 'function' | 'mapping' | 'record' | 'struct' | <<eof>> )

// registers are valid identifiers as well
private identifier_or_register ::= lowercase_identifier | identifier | register

private lowercase_identifier_or_register ::= lowercase_identifier | register

program_name ::= lowercase_identifier_or_register

program_domain ::= "aleo"

program_id ::= program_name "." program_domain

locator ::= program_id "/" identifier_or_register


register_access ::= register ( "." identifier_or_register )*


literal ::= arithmetic_literal | address_literal | boolean_literal | string_literal


operand ::= literal | "group::GEN" | register_access | "self.caller" | "block.height" | program_id


unsigned_type ::= "u8" | "u16" | "u32" | "u64" | "u128"

signed_type ::= "i8" | "i16" | "i32" | "i64" | "i128"

integer_type ::= unsigned_type | signed_type

field_type ::= "field"

group_type ::= "group"

scalar_type ::= "scalar"

arithmetic_type ::= integer_type | field_type | group_type | scalar_type

address_type ::= "address"

boolean_type ::= "boolean"

string_type ::= "string"

literal_type ::= arithmetic_type | address_type | boolean_type | string_type

plaintext_type ::= literal_type | identifier_or_register {
 implements = "im.mrx.leolanguage.aleo.psi.AleoReferenceElement"
 mixin = "im.mrx.leolanguage.aleo.psi.AleoNamedTypeImplMixin"
}

value_type ::= plaintext_type "." entry_visibility | identifier_or_register ".record" | locator ".record"

finalize_type ::= plaintext_type ".public" | identifier_or_register ".record" | locator ".record"

entry_type ::= plaintext_type "." entry_visibility

register_type ::= locator ".record" | identifier_or_register ".record" | plaintext_type


import ::= "import" program_id ";" { pin = 1 }


mapping ::= "mapping" identifier_or_register ":" mapping_key mapping_value {
 pin = 1
 implements = "im.mrx.leolanguage.aleo.psi.AleoNamedElement"
 mixin = "im.mrx.leolanguage.aleo.psi.AleoNamedElementImpl"
}

mapping_key ::= "key" identifier_or_register "as" finalize_type ";" { pin = 1 }

mapping_value ::= "value" identifier_or_register "as" finalize_type ";" { pin = 1 }


struct ::= "struct" identifier_or_register ":" tuple+ {
 pin = 1
 implements = "im.mrx.leolanguage.aleo.psi.AleoNamedElement"
 mixin = "im.mrx.leolanguage.aleo.psi.AleoNamedElementImpl"
}

tuple ::= identifier_or_register "as" plaintext_type ";" // { recoverWhile = tuple_recover }

// private tuple_recover ::= !( 'closure' | 'function' | 'interface' | 'mapping' | 'record' | identifier | <<eof>> )


record ::= "record" identifier_or_register ":" entry* {
 pin = 1
 implements = "im.mrx.leolanguage.aleo.psi.AleoNamedElement"
 mixin = "im.mrx.leolanguage.aleo.psi.AleoNamedElementImpl"
}

entry_identifier ::= "owner" | identifier_or_register

entry ::= entry_identifier "as" entry_type ";" { recoverWhile = entry_recover }

private entry_recover ::= !( 'closure' | 'function' | 'mapping' | 'record' | 'struct' | identifier | register | <<eof>> )


unary_op ::= "abs" | "abs.w" | "double" | "inv"
            | "neg" | "not" | "square" | "sqrt"

binary_op ::= "add" | "add.w" | "sub" | "sub.w" | "mul" | "mul.w"
            | "div" | "div.w" | "rem" | "rem.w" | "mod" | "pow" | "pow.w"
            | "shl" | "shl.w" | "shr" | "shr.w"
            | "and" | "or" | "xor" | "nand" | "nor"
            | "gt" | "gte" | "lt" | "lte"

ternary_op ::= "ternary"

is_op ::= "is.eq" | "is.neq"

assert_op ::= "assert.eq" | "assert.neq"

commit_op ::= "commit.bhp256" | "commit.bhp512" | "commit.bhp768" | "commit.bhp1024"
            | "commit.ped64" | "commit.ped128"

hash_op ::= "hash.bhp256" | "hash.bhp512" | "hash.bhp768" | "hash.bhp1024"
          | "hash.ped64" | "hash.ped128"
          | "hash.psd2" | "hash.psd4" | "hash.psd8"
          | "hash_many.psd2" | "hash_many.psd4" | "hash_many.psd8"

cast_op ::= "cast"

cast_destination ::= register_type | "group.x" | "group.y"
          
unary ::= unary_op operand "into" register { pin = 1 }

binary ::= binary_op operand operand "into" register { pin = 1 }

ternary ::= ternary_op operand operand operand "into" register { pin = 1 }

is ::= is_op operand operand "into" register { pin = 1 }

assert ::= assert_op operand operand { pin = 1 }

commit ::= commit_op operand operand "into" register "as" ( address_type | field_type | group_type ) { pin = 1 }

hash ::= hash_op operand "into" register "as" ( arithmetic_type | address_type ) { pin = 1 }

cast ::= cast_op operand+ "into" register "as" cast_destination { pin = 1 }

call ::= "call" ( locator | identifier_or_register ) operand* "into" register+ { pin = 1 }

instruction ::= ( unary | binary | ternary | is | assert | commit | hash | cast | call ) ";" { recoverWhile = instruction_recover }

private instruction_recover ::= !( instruction_name | keyword | <<eof>> )

contains ::= "contains" identifier_or_register "[" operand "]" "into" register { pin = 1 }

get ::= "get" identifier_or_register "[" operand "]" "into" register { pin = 1 }

get_or_use ::= "get.or_use" identifier_or_register "[" operand "]" operand "into" register { pin = 1 }

set ::= "set" operand "into" identifier_or_register "[" operand "]" { pin = 1 }

remove ::= "remove" identifier_or_register "[" operand "]" { pin = 1 }

random ::= "rand.chacha" [ operand [ operand ] ] "into" register "as" literal_type { pin = 1 }

label ::= identifier_or_register

position ::= "position" label { pin = 1 }

branch_op ::= "branch.eq" | "branch.neq"

branch ::= branch_op operand operand label { pin = 1 }

command ::= ( contains | get | get_or_use | set | remove | random | position | branch | instruction ) ";" { recoverWhile = command_recover }

private command_recover ::= !( "contains" | "get" | "get.or_use" | "set" | "remove" | "rand.chacha" | "position" | branch_op | instruction_name | "output" | <<eof>> )

finalize_command ::= "finalize" operand* ";" { pin = 1 }


function ::= "closure" identifier_or_register ":" function_input* instruction+ function_output* {
 pin = 1
 implements = "im.mrx.leolanguage.aleo.psi.AleoNamedElement"
 mixin = "im.mrx.leolanguage.aleo.psi.AleoNamedElementImpl"
}

function_input ::= "input" register "as" register_type ";" { pin = 1 }

function_output ::= "output" operand "as" register_type ";" { pin = 1 }


transition ::= "function" identifier_or_register ":" transition_input* instruction* transition_output* [ finalize_command finalize ] {
 pin = 1
 implements = "im.mrx.leolanguage.aleo.psi.AleoNamedElement"
 mixin = "im.mrx.leolanguage.aleo.psi.AleoNamedElementImpl"
}

transition_input ::= "input" register "as" value_type ";" { pin = 1 }

transition_output ::= "output" operand "as" value_type ";" { pin = 1 }

finalize ::= "finalize" identifier_or_register ":" finalize_input* command+ finalize_output* { pin = 1 }

finalize_input ::= "input" register "as" finalize_type ";" { pin = 1 }

finalize_output ::= "output" operand "as" finalize_type ";" { pin = 1 }
