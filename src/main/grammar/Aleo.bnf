/*
 * Copyright (c) 2022 Haruka Ma
 * This file is part of Leo / Aleo IntelliJ plugin.
 *
 * Leo / Aleo IntelliJ plugin is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Leo / Aleo IntelliJ plugin is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Leo / Aleo IntelliJ plugin. If not, see <https://www.gnu.org/licenses/>.
 */

//noinspection BnfSuspiciousTokenForFile
{
  parserClass="im.mrx.leolanguage.aleo.AleoParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Aleo"
  psiImplClassSuffix="Impl"
  psiPackage="im.mrx.leolanguage.aleo.psi"
  psiImplPackage="im.mrx.leolanguage.aleo.psi.impl"

  elementTypeHolderClass="im.mrx.leolanguage.aleo.psi.AleoTypes"
  elementTypeClass="im.mrx.leolanguage.aleo.psi.AleoElementType"
  tokenTypeClass="im.mrx.leolanguage.aleo.psi.AleoTokenType"

  tokens = [
    keyword = "regexp:import|program|interface|record|function|closure|into|as|field|group|scalar|u8|u16|u32|u64|u128|i8|i16|i32|i64|i128|address|boolean|string|increment|decrement|finalize|mapping|key|value"
    instruction_name = "regexp:input|output|cast|call|abs|abs.w|double|inv|neg|not|square|sqrt|hash.bhp256|hash.bhp512|hash.bhp768|hash.bhp1024|hash.ped64|hash.ped128|hash.psd2|hash.psd4|hash.psd8|add|add.w|sub|sub.w|mul|mul.w|div|div.w|rem|rem.w|mod|pow|pow.w|shl|shl.w|shr|shr.w|and|or|xor|nand|nor|gt|gte|lt|lte|is.eq|is.neq|commit.bhp256|commit.bhp512|commit.bhp768|commit.bhp1024|commit.ped64|commit.ped128|ternary|assert.eq|assert.neq"
    entry_visibility = "regexp:public|private|constant"
    address_literal = "regexp:aleo1[ac-hj-np-z02-9]{58}"
    boolean_literal = "regexp:true|false"
    register = "regexp:r[0-9]+"
    identifier = "regexp:[A-Za-z_][A-Za-z0-9_]*"
    string_literal = "regexp:\"([\x00-\x21\x23-\x5b\u005d-\uffff]|\\\"|\\\\)*\""
    arithmetic_literal = "regexp:-?[0-9_]+([ui](8|16|32|64|128)|field|group|scalar)"
    numeral = "regexp:[0-9]+"
    line_comment = "regexp://.*"
    block_comment = "regexp:(/[*](?:[^*]|[*][^/])*[*]/)"

    brackets = "regexp:[\[\]]"
    semicolon = ";"
    colon = ":"
    dot = "."
    as = "as"
  ]
}

program ::= import* "program" program_id ";" definition+ { pin = 2 }

program_id ::= identifier "." identifier

import ::= "import" program_id ";" { pin = 1 }


definition ::= mapping | interface | record | closure | function { recoverWhile = definition_recover }

private definition_recover ::= !( "mapping" | "interface" | "record" | "closure" | "function" )


mapping ::= "mapping" identifier ":" mapping_key mapping_value {
 pin = 1
 implements = "im.mrx.leolanguage.aleo.psi.AleoNamedElement"
 mixin = "im.mrx.leolanguage.aleo.psi.AleoNamedElementImpl"
}

mapping_key ::= "key" identifier "as" finalize_type ";" { pin = 1 }

mapping_value ::= "value" identifier "as" finalize_type ";" { pin = 1 }


interface ::= "interface" identifier ":" tuple+ {
 pin = 1
 implements = "im.mrx.leolanguage.aleo.psi.AleoNamedElement"
 mixin = "im.mrx.leolanguage.aleo.psi.AleoNamedElementImpl"
}

tuple ::= identifier "as" plaintext_type ";"


record ::= "record" identifier ":" entry* {
 pin = 1
 implements = "im.mrx.leolanguage.aleo.psi.AleoNamedElement"
 mixin = "im.mrx.leolanguage.aleo.psi.AleoNamedElementImpl"
}

entry ::= identifier "as" entry_type ";"


closure ::= "closure" identifier ":" closure_input* instruction+ closure_output* {
 pin = 1
 implements = "im.mrx.leolanguage.aleo.psi.AleoNamedElement"
 mixin = "im.mrx.leolanguage.aleo.psi.AleoNamedElementImpl"
}

closure_input ::= "input" register "as" register_type ";" { pin = 1 }

closure_output ::= "output" register_access "as" register_type ";" { pin = 1 }


function ::= "function" identifier ":" function_input* instruction* function_output* [ finalize_command finalize ] {
 pin = 1
 implements = "im.mrx.leolanguage.aleo.psi.AleoNamedElement"
 mixin = "im.mrx.leolanguage.aleo.psi.AleoNamedElementImpl"
}

function_input ::= "input" register "as" value_type ";" { pin = 1 }

function_output ::= "output" register_access "as" value_type ";" { pin = 1 }

finalize_command ::= "finalize" operand* ";" { pin = 1 }

finalize ::= "finalize" identifier ":" finalize_input* command+ finalize_output* { pin = 1 }

finalize_input ::= "input" register "as" finalize_type ";" { pin = 1 }

finalize_output ::= "output" register_access "as" finalize_type ";" { pin = 1 }


literal ::= arithmetic_literal | address_literal | boolean_literal | string_literal


operand ::= literal | register_access | "self.caller" | program_id


unsigned_type ::= "u8" | "u16" | "u32" | "u64" | "u128"

signed_type ::= "i8" | "i16" | "i32" | "i64" | "i128"

integer_type ::= unsigned_type | signed_type

field_type ::= "field"

group_type ::= "group"

scalar_type ::= "scalar"

arithmetic_type ::= integer_type | field_type | group_type | scalar_type

address_type ::= "address"

boolean_type ::= "boolean"

string_type ::= "string"

literal_type ::= arithmetic_type | address_type | boolean_type | string_type

plaintext_type ::= literal_type | identifier {
 implements = "im.mrx.leolanguage.aleo.psi.AleoReferenceElement"
 mixin = "im.mrx.leolanguage.aleo.psi.AleoNamedTypeImplMixin"
}

value_type ::= plaintext_type "." entry_visibility | identifier ".record" | locator ".record"

finalize_type ::= plaintext_type ".public" | identifier ".record" | locator ".record"

entry_type ::= plaintext_type "." entry_visibility

register_type ::= locator ".record" | identifier ".record" | plaintext_type

locator ::= program_id "/" identifier


register_access ::= register ( "." identifier )*


unary_op ::= "abs" | "abs.w" | "double" | "inv"
            | "neg" | "not" | "square" | "sqrt"

binary_op ::= "add" | "add.w" | "sub" | "sub.w" | "mul" | "mul.w"
            | "div" | "div.w" | "rem" | "rem.w" | "mod" | "pow" | "pow.w"
            | "shl" | "shl.w" | "shr" | "shr.w"
            | "and" | "or" | "xor" | "nand" | "nor"
            | "gt" | "gte" | "lt" | "lte"

ternary_op ::= "ternary"

is_op ::= "is.eq" | "is.neq"

assert_op ::= "assert.eq" | "assert.neq"

commit_op ::= "commit.bhp256" | "commit.bhp512" | "commit.bhp768" | "commit.bhp1024"
            | "commit.ped64" | "commit.ped128"

hash_op ::= "hash.bhp256" | "hash.bhp512" | "hash.bhp768" | "hash.bhp1024"
          | "hash.ped64" | "hash.ped128"
          | "hash.psd2" | "hash.psd4" | "hash.psd8"

unary ::= unary_op operand "into" register { pin = 1 }

binary ::= binary_op operand operand "into" register { pin = 1 }

ternary ::= ternary_op operand operand operand "into" register { pin = 1 }

is ::= is_op operand operand "into" register { pin = 1 }

assert ::= assert_op operand operand { pin = 1 }

commit ::= commit_op operand operand "into" register { pin = 1 }

hash ::= hash_op operand "into" register { pin = 1 }

cast ::= "cast" operand+ "into" register "as" register_type { pin = 1 }

call ::= "call" ( locator | identifier ) operand+ "into" register+ { pin = 1 }

instruction ::= ( unary | binary | ternary | is | assert | commit | hash | cast | call ) ";" { recoverWhile = instruction_recover }

private instruction_recover ::= !( instruction_name | "call" | "cast" | "finalize")

increment ::= "increment" identifier "[" operand "]" "by" operand ";" { pin = 1 }

decrement ::= "decrement" identifier "[" operand "]" "by" operand ";" { pin = 1 }

command ::= increment | decrement | instruction


comment ::= line_comment | block_comment