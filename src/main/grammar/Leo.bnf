/*
 * Copyright (c) 2022-2023 Haruka Ma
 * This file is part of Leo / Aleo IntelliJ plugin.
 *
 * Leo / Aleo IntelliJ plugin is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * Leo / Aleo IntelliJ plugin is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Leo / Aleo IntelliJ plugin. If not, see <https://www.gnu.org/licenses/>.
 */

//noinspection BnfSuspiciousTokenForFile
{
  parserClass="im.mrx.leolanguage.leo.LeoParser"
  parserUtilClass="im.mrx.leolanguage.leo.LeoParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  extends(".*expression")=expression
  extends(".*operator_call")=expression
  psiClassPrefix="Leo"
  psiImplClassSuffix="Impl"
  psiPackage="im.mrx.leolanguage.leo.psi"
  psiImplPackage="im.mrx.leolanguage.leo.psi.impl"

  elementTypeHolderClass="im.mrx.leolanguage.leo.psi.LeoTypes"
  elementTypeClass="im.mrx.leolanguage.leo.psi.LeoElementType"
  tokenTypeClass="im.mrx.leolanguage.leo.psi.LeoTokenType"

  tokens = [
    ascii = "regexp:[\u0000-\u007F]"
    safe-nonascii = "regexp:[\u0080-\u2029\u202F-\u2065\u2070-\uD7FF\uE000-\uFFFF]"
    character = "regexp:[\u0000-\u007F\u0080-\u2029\u202F-\u2065\u2070-\uD7FF\uE000-\uFFFF]"
    horizontal-tab = "\t"
    line-feed = "regexp:\n"
    carriage-return = "regexp:\r"
    space = " "
    double-quote = "\""
    single-quote = "\'"
    line-terminator = "regexp:\n|\r|\r\n"
    whitespace = "regexp: |\t|\n|\r|\r\n"
    not-line-feed-or-carriage-return = "regexp:[\u0000-\u0009\u000B-\u000C\u000E-\u007F\u0080-\u2029\u202F-\u2065\u2070-\uD7FF\uE000-\uFFFF]"
    not-star-or-line-feed-or-carriage-return = "regexp:[\u0000-\u0009\u000B-\u000C\u000E-\u0029\u002B-\u007F\u0080-\u2029\u202F-\u2065\u2070-\uD7FF\uE000-\uFFFF]"
    not-star-or-slash-or-line-feed-or-carriage-return = "regexp:[\u0000-\u0009\u000B-\u000C\u000E-\u0029\u002B-\u002E\u0030-\u007F\u0080-\u2029\u202F-\u2065\u2070-\uD7FF\uE000-\uFFFF]"
    not-double-quote-or-backslash-or-line-feed-or-carriage-return = "regexp:[\u0000-\u0009\u000B-\u000C\u000E-\u0021\u0023-\u005B\u005D-\u007F\u0080-\u2029\u202F-\u2065\u2070-\uD7FF\uE000-\uFFFF]"
    line-comment = "regexp:(//[\u0000-\u0009\u000B-\u000C\u000E-\u007F\u0080-\u2029\u202F-\u2065\u2070-\uD7FF\uE000-\uFFFF]*)"
    block-comment = "regexp:(/[*](?:[^*]|[*][^/])*[*]/)"
    keyword = "regexp:address|async|bool|console|constant|decrement|else|field|finalize|for|function|group|i8|i16|i32|i64|i128|if|import|in|inline|increment|let|mapping|private|program|public|record|return|scalar|string|struct|then|transition|u8|u16|u32|u64|u128|self"
    core_struct = "regexp:BHP256|BHP512|BHP768|BHP1024|Pedersen64|Pedersen128|Poseidon2|Poseidon4|Poseidon8"
    uppercase-letter = "regexp:[A-Z]"
    lowercase-letter = "regexp:[a-z]"
    letter = "regexp:[a-zA-Z]"
    decimal-digit = "regexp:[0-9]"
    octal-digit = "regexp:[0-7]"
    hexadecimal-digit = "regexp:[0-9a-f]"
    identifier = "regexp:[a-zA-Z][a-zA-Z0-9_]*"
    numeral = "regexp:[0-9]+"
    unsigned-literal = "regexp:[0-9]+u(8|16|32|64|128)"
    signed-literal = "regexp:[0-9]+i(8|16|32|64|128)"
    field-literal = "regexp:[0-9]+field"
    product-group-literal = "regexp:[0-9]+group"
    scalar-literal = "regexp:[0-9]+scalar"
    boolean-literal = "regexp:true|false"
    address-literal = "regexp:aleo1[a-z0-9]{58}"
    single-quote-escape = "regexp:\\'"
    double-quote-escape = "regexp:\\\""
    backslash-escape = "regexp:\\"
    line-feed-escape = "regexp:\\n"
    carriage-return-escape = "regexp:\\r"
    horizontal-tab-escape = "regexp:\\t"
    null-character-escape = "regexp:\\0"
    simple-character-escape = "regexp:(\\'|\\\"|\\|\\n|\\r|\\t|\\0)"
    ascii-character-escape = "regexp:\\x[0-7][0-9a-f]"
    unicode-character-escape = "regexp:\\u\{[0-9a-f]{1,6}}"
    string-literal = "regexp:\"([\u0000-\u0009\u000B-\u000C\u000E-\u0021\u0023-\u005B\u005D-\u007F\u0080-\u2029\u202F-\u2065\u2070-\uD7FF\uE000-\uFFFF]|\\'|\\\"|\\|\\n|\\r|\\t|\\0|\\x[0-7][0-9a-f]|\\u\{[0-9a-f]{1,6}})*\""
    integer-literal = "regexp:[0-9]+[ui](8|16|32|64|128)"
    numeric-literal = "regexp:[0-9]+([ui](8|16|32|64|128)|field|group|scalar)"
//    atomic-literal = "regexp:[0-9]+([ui](8|16|32|64|128)|field|group|scalar)|true|false|aleo1[a-z0-9]{58}|\"([\u0000-\u0009\u000B-\u000C\u000E-\u0021\u0023-\u005B\u005D-\u007F\u0080-\u2029\u202F-\u2065\u2070-\uD7FF\uE000-\uFFFF]|\\'|\\\"|\\|\\n|\\r|\\t|\\0|\\x[0-7][0-9a-f]|\\u\{[0-9a-f]{1,6}})*\""
//    annotation = "regexp:@[a-zA-Z][a-zA-Z0-9_]*"
    symbol = "regexp:!|&&|\|\||==|!=|<|<=|>|>=|&|\||\^|<<|>>|\+|-|\*|%|\*\*|=|\+=|-=|\*=|/=|%=|\*\*=|<<=|>>=|&=|\|=|\^=|&&=|\|\|=|\.\.|\?|->|_|=>"
    at = "@"
    group-end = "\)group"

    // highlighting tokens

    lbrace = "{"
    rbrace = "}"
    lparen = "("
    rparen = ")"
    brackets = "regexp:[\[\]]"
    dot = "."
    comma = ","
    semicolon = ";"
    slash = "/"
    dash = "-"

    // TODO highlighting?
    colon = ":"
    double-colon = "::"
    ]

}

//token ::= keyword
//      | identifier
//      | atomic-literal
//      | numeral
//      | annotation
//      | symbol

//lexeme ::= token | comment | whitespace

// root
file ::= import_declaration* program_declaration { pin = 1 }

// from lexical

annotation ::= "@" identifier

private atomic_literal ::= numeric-literal
               | boolean-literal
               | address-literal
               | string-literal

// from syntactic

program_id ::= identifier "." identifier { pin = 2 }

locator ::= program_id "/" identifier {
    pin = 2
    implements = "im.mrx.leolanguage.leo.psi.LeoReferenceElement"
    mixin = "im.mrx.leolanguage.leo.psi.LeoLocatorImplMixin"
}

unsigned_type ::= "u8" | "u16" | "u32" | "u64" | "u128"

signed_type ::= "i8" | "i16" | "i32" | "i64" | "i128"

private integer_type ::= unsigned_type | signed_type

field_type ::= "field"

group_type ::= "group"

scalar_type ::= "scalar"

private arithmetic_type ::= integer_type | field_type | group_type | scalar_type

boolean_type ::= "bool"

address_type ::= "address"

string_type ::= "string"

named_primitive_type ::= boolean_type | arithmetic_type | address_type | string_type

unit_type ::= "(" ")"

named_type ::= named_primitive_type | core_struct | ( locator [ ".record" ] ) | ( identifier [ ".record" ] ) {
    implements = "im.mrx.leolanguage.leo.psi.LeoReferenceElement"
    mixin = "im.mrx.leolanguage.leo.psi.LeoNamedTypeImplMixin"
}

tuple_type ::= "(" type { "," type }+ [ "," ] ")"

private type ::= named_type | unit_type | tuple_type

group_coordinate ::= ( [ "-" ] numeral ) | "+" | "-" | "_"

affine_group_literal ::= "(" group_coordinate "," group_coordinate ")group"

private literal ::= atomic_literal | affine_group_literal

//noinspection BnfUnusedRule
private group_literal ::= product-group-literal | affine_group_literal

expression ::= conditional_ternary_expression
             | conditional_disjunctive_expression
             | conditional_conjunctive_expression
             | equality_expression_group
             | ordering_expression_group
             | exclusive_disjunctive_expression
             | disjunctive_expression
             | conjunctive_expression
             | shift_expression_group
             | additive_expression_group
             | multiplicative_expression_group
             | exponential_expression
             | unary_expression_group
             | postfix_expression_group
             | primary_expression

private no_struct_literal_expression ::= <<setAllowStructExpression 0>> expression <<resetAllowStructExpression>> {
 elementType = expression
 name = "expression"
}

private equality_expression_group ::= equality_expression | inequality_expression
private ordering_expression_group ::= ordering_less_expression | ordering_greater_expression | ordering_less_or_equal_expression | ordering_greater_or_equal_expression
private shift_expression_group ::= shift_left_expression | shift_right_expression
private additive_expression_group ::= additive_add_expression | additive_sub_expression
private multiplicative_expression_group ::= multiplicative_mul_expression | multiplicative_div_expression | multiplicative_mod_expression
private unary_expression_group ::= unary_not_expression | unary_minus_expression { rightAssociative = true }
private postfix_expression_group ::= tuple_component_expression | operator_call | struct_component_expression

conditional_ternary_expression ::= expression "?" expression ":" expression { rightAssociative = true }

conditional_disjunctive_expression ::= expression "||" expression

conditional_conjunctive_expression ::= expression "&&" expression

equality_expression ::= expression "==" expression
inequality_expression ::= expression "!=" expression

ordering_less_expression ::= expression "<" expression {
    implements = "im.mrx.leolanguage.leo.psi.LeoOrderingExpression"
}
ordering_greater_expression ::= expression ">" expression {
    implements = "im.mrx.leolanguage.leo.psi.LeoOrderingExpression"
}
ordering_less_or_equal_expression ::= expression "<=" expression {
    implements = "im.mrx.leolanguage.leo.psi.LeoOrderingExpression"
}
ordering_greater_or_equal_expression ::= expression ">=" expression {
    implements = "im.mrx.leolanguage.leo.psi.LeoOrderingExpression"
}

exclusive_disjunctive_expression ::= expression "^" expression

disjunctive_expression ::= expression "|" expression

conjunctive_expression ::= expression "&" expression

shift_left_expression ::= expression "<<" expression
shift_right_expression ::= expression ">>" expression

additive_add_expression ::= expression "+" expression
additive_sub_expression ::= expression "-" expression

multiplicative_mul_expression ::= expression "*" expression
multiplicative_div_expression ::= expression "/" expression
multiplicative_mod_expression ::= expression "%" expression

exponential_expression ::= expression "**" expression

unary_not_expression ::= "!" expression
unary_minus_expression ::= "-" expression

tuple_component_expression ::= expression "." numeral
struct_component_identifier ::= identifier {
    implements = [
        "im.mrx.leolanguage.leo.psi.LeoReferenceElement"
        "im.mrx.leolanguage.leo.psi.LeoStructComponentIdentifierExt"
    ]
    mixin = "im.mrx.leolanguage.leo.psi.LeoStructComponentIdentifierImplMixin"
}
struct_component_expression ::= expression "." struct_component_identifier
private operator_call ::= unary_operator_call | binary_operator_call
unary_operator_call ::= expression "." identifier "(" ")" { pin = 4 }
binary_operator_call ::= expression "." identifier "(" expression [ "," ] ")" { pin = 4 }

primary_expression ::= literal
                   | static_function_call
                   | associated_constant
                   | self_expression
                   | "(" expression ")"
                   | free_function_call
                   | unit_expression
                   | tuple_expression
                   | struct_expression
                   | variable

self_expression ::= "self" "." identifier {
    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"
}

variable ::= identifier {
    implements = "im.mrx.leolanguage.leo.psi.LeoReferenceElement"
    mixin = "im.mrx.leolanguage.leo.psi.LeoVariableImplMixin"
}

associated_constant ::= named_type "::" identifier

function_identifier ::= identifier {
    implements = "im.mrx.leolanguage.leo.psi.LeoReferenceElement"
    mixin = "im.mrx.leolanguage.leo.psi.LeoFunctionIdentifierImplMixin"
}

free_function_call ::= ( locator | function_identifier ) function_arguments { pin = 2 }

static_function_call ::= named_type "::" identifier function_arguments { pin = 4 }

function_arguments ::= "(" [ expression ( "," expression )* [ "," ] ] ")" { pin = 1 }

unit_expression ::= "(" ")"

tuple_expression ::= "(" expression { "," expression }+ [ "," ] ")" {
    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"
}

struct_expression_identifier ::= identifier {
    implements = "im.mrx.leolanguage.leo.psi.LeoReferenceElement"
    mixin = "im.mrx.leolanguage.leo.psi.LeoStructExpressionIdentifierImplMixin"
}

struct_expression ::= <<checkStructExpressionAllowed>> struct_expression_identifier "{"
                    struct_component_initializer
                        ( "," struct_component_initializer )*
                        [ "," ] "}" {
    pin = 3
    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"
}

struct_component_initializer ::= struct_component_identifier ":" expression | struct_component_identifier { pin(".*") = 2 }

private statement ::= return_statement
          | expression_statement
          | variable_declaration
          | conditional_statement
          | loop_statement
          | assignment_statement
          | console_statement
          | increment_statement
          | decrement_statement
          | block { recoverWhile = statement_recover }

private statement_recover ::= !( "}" | identifier | keyword | line-terminator )

block ::= "{" statement* "}" { pin = 1 }

return_statement ::= "return" [ expression ] [ "then" finalize_literal function_arguments ] ";" {
    pin = 1
    implements = "im.mrx.leolanguage.leo.psi.LeoStatement"
}

expression_statement ::= expression ";"

variable_declaration ::= "let" identifier_or_identifiers ":" type "=" expression ";" {
    pin = 1
    implements = [
        "im.mrx.leolanguage.leo.psi.LeoVariableLikeDeclaration"
    ]
}

identifier_item ::= identifier {
    implements = [
        "im.mrx.leolanguage.leo.psi.LeoNameIdentifierOwner"
        "im.mrx.leolanguage.leo.psi.LeoTypedElement"
    ]
    mixin = "im.mrx.leolanguage.leo.psi.LeoIdentifierItemImplMixin"
}

identifier_or_identifiers ::= "(" identifier_item ( "," identifier_item )+ [ "," ] ")" | identifier_item {
    pin(".*") = 1
}

branch ::= "if" no_struct_literal_expression block { pin = 1 }

conditional_statement ::= branch "else" block
                      | branch "else" conditional_statement
                      | branch {
    implements = "im.mrx.leolanguage.leo.psi.LeoStatement"
}

loop_statement ::= "for" identifier ":" type
                 "in" expression ".." [ "=" ] no_struct_literal_expression
                 block {
    pin = 1
    implements = [
        "im.mrx.leolanguage.leo.psi.LeoStatement"
        "im.mrx.leolanguage.leo.psi.LeoTypedElement"
        "im.mrx.leolanguage.leo.psi.LeoNamedElement"
    ]
    mixin = "im.mrx.leolanguage.leo.psi.LeoNamedElementImpl"
}

assignment_operator ::= "="
                    | "+="
                    | "-="
                    | "*="
                    | "/="
                    | "%="
                    | "**="
                    | "<<="
                    | ">>="
                    | "&="
                    | "|="
                    | "^="
                    | "&&="
                    | "||="

assignment_statement ::= expression assignment_operator expression ";" {
    pin = 2
    rightAssociative = true
    implements = "im.mrx.leolanguage.leo.psi.LeoStatement"
}

console_statement ::= "console" "." console_call ";" {
    pin = 1
    implements = "im.mrx.leolanguage.leo.psi.LeoStatement"
}

finalize_literal ::= "finalize" {
    implements = "im.mrx.leolanguage.leo.psi.LeoReferenceElement"
    mixin = "im.mrx.leolanguage.leo.psi.LeoFinalizeLiteralImplMixin"
}

mapping_identifier ::= identifier {
    implements = "im.mrx.leolanguage.leo.psi.LeoReferenceElement"
    mixin = "im.mrx.leolanguage.leo.psi.LeoMappingIdentifierImplMixin"
}

increment_statement ::= "increment" "(" mapping_identifier "," expression "," expression [ "," ] ")" ";" {
    pin = 1
    implements = "im.mrx.leolanguage.leo.psi.LeoIncrementLikeStatement"
}

decrement_statement ::= "decrement" "(" mapping_identifier "," expression "," expression [ "," ] ")" ";" {
    pin = 1
    implements = "im.mrx.leolanguage.leo.psi.LeoIncrementLikeStatement"
}

private console_call ::= assert_call
             | assert_equal_call
             | assert_not_equal_call

assert_call ::= "assert" "(" expression ")"

assert_equal_call ::= "assert_eq" "(" expression "," expression [ "," ] ")"

assert_not_equal_call ::= "assert_neq" "(" expression "," expression [ "," ] ")"

function_declaration ::= annotation* "function" identifier
                       function_parameter_list [ "->" type ]
                       block {
                        pin = 2
                        implements = [
                          "im.mrx.leolanguage.leo.psi.LeoFunctionLikeDeclaration"
                          "com.intellij.psi.StubBasedPsiElement"
                        ]
                        mixin = "im.mrx.leolanguage.leo.stub.LeoStubbedElementImpl"
                        elementTypeFactory = "im.mrx.leolanguage.leo.stub.LeoStubElementFactoryKt.factory"
                        }

function_parameter_list ::= "(" [ function_parameter ( "," function_parameter )* [ "," ] ] ")" {
    pin = 1
    recoverWhile = function_parameter_list_recover
}

private function_parameter_list_recover ::= !( '->' | '@' | 'function' | 'mapping' | 'record' | 'struct' | 'transition' | '{' | '}' )

function_parameter ::= [ "public" | "private" | "constant" ]
                     identifier ":" type {
                        pin = 3
                        implements = [
                            "im.mrx.leolanguage.leo.psi.LeoNamedElement"
                            "im.mrx.leolanguage.leo.psi.LeoTypedElement"
                        ]
                        mixin = "im.mrx.leolanguage.leo.psi.LeoNamedElementImpl"
                        recoverWhile = function_parameter_recover
                     }

inline_declaration ::= annotation* "inline" identifier
                       function_parameter_list "->" type
                       block {
                        pin = 2
                        implements = [
                          "im.mrx.leolanguage.leo.psi.LeoFunctionLikeDeclaration"
                          "com.intellij.psi.StubBasedPsiElement"
                        ]
                        mixin = "im.mrx.leolanguage.leo.stub.LeoStubbedElementImpl"
                        elementTypeFactory = "im.mrx.leolanguage.leo.stub.LeoStubElementFactoryKt.factory"
                        }

private function_parameter_recover ::= !( ')' | ',' | '->' | '@' | 'function' | 'mapping' | 'record' | 'struct' | 'transition' | '{' | '}' )

transition_declaration ::= annotation* "transition" identifier
                       function_parameter_list [ "->" [ "public" | "private" | "constant" ] type ]
                       block [ finalizer ] {
                        pin = 2
                        implements = [
                          "im.mrx.leolanguage.leo.psi.LeoFunctionLikeDeclaration"
                          "com.intellij.psi.StubBasedPsiElement"
                        ]
                        mixin = "im.mrx.leolanguage.leo.stub.LeoStubbedElementImpl"
                        elementTypeFactory = "im.mrx.leolanguage.leo.stub.LeoStubElementFactoryKt.factory"
                        }

finalizer ::= "finalize" identifier
            function_parameter_list [ "->" [ "public" | "private" | "constant" ] type ]
            block {
                pin = 1
                implements = [
                    "im.mrx.leolanguage.leo.psi.LeoNamedElement"
                    "im.mrx.leolanguage.leo.psi.LeoTypedElement"
                ]
                mixin = "im.mrx.leolanguage.leo.psi.LeoNamedElementImpl"
            }

struct_declaration ::= "struct" identifier
                      struct_component_declarations {
                        pin = 1
                        implements = [
                          "im.mrx.leolanguage.leo.psi.LeoStructLikeDeclaration"
                          "com.intellij.psi.StubBasedPsiElement"
                        ]
                        mixin = "im.mrx.leolanguage.leo.stub.LeoStubbedElementImpl"
                        elementTypeFactory = "im.mrx.leolanguage.leo.stub.LeoStubElementFactoryKt.factory"
                      }

struct_component_declarations ::= "{" struct_component_declaration
                                 ( "," struct_component_declaration )*
                                 [ "," ] "}" { pin = 1 }

struct_component_declaration ::= identifier ":" type  {
    pin = 1
    implements = [
        "im.mrx.leolanguage.leo.psi.LeoNamedElement"
        "im.mrx.leolanguage.leo.psi.LeoTypedElement"
        "com.intellij.psi.StubBasedPsiElement"
    ]
    mixin = "im.mrx.leolanguage.leo.stub.LeoStubbedElementImpl"
    elementTypeFactory = "im.mrx.leolanguage.leo.stub.LeoStubElementFactoryKt.factory"
}

record_declaration ::= "record" identifier
                     struct_component_declarations {
                        pin = 1
                        implements = [
                          "im.mrx.leolanguage.leo.psi.LeoStructLikeDeclaration"
                          "com.intellij.psi.StubBasedPsiElement"
                        ]
                        mixin = "im.mrx.leolanguage.leo.stub.LeoStubbedElementImpl"
                        elementTypeFactory = "im.mrx.leolanguage.leo.stub.LeoStubElementFactoryKt.factory"
                    }

mapping_type ::= type {
    implements = "im.mrx.leolanguage.leo.psi.LeoTypedElement"
}

mapping_declaration ::= "mapping" identifier ":" mapping_type "=>" mapping_type ";" {
    pin = 1
    implements = [
        "im.mrx.leolanguage.leo.psi.LeoNamedElement"
        "com.intellij.psi.StubBasedPsiElement"
    ]
    mixin = "im.mrx.leolanguage.leo.stub.LeoStubbedElementImpl"
    elementTypeFactory = "im.mrx.leolanguage.leo.stub.LeoStubElementFactoryKt.factory"
}

import_program_id ::= program_id {
    implements = "im.mrx.leolanguage.leo.psi.LeoReferenceElement"
    mixin = "im.mrx.leolanguage.leo.psi.LeoImportProgramIdImplMixin"
}

import_declaration ::= "import" import_program_id ";" {
    pin = 1
    recoverWhile = import_declaration_recover
}

private import_declaration_recover ::= !( 'import' | 'program' | <<eof>> )

program_declaration ::= "program" program_id program_block {
    pin = 1
    implements = [
        "im.mrx.leolanguage.leo.psi.LeoNamedElement"
    ]
    mixin = "im.mrx.leolanguage.leo.psi.LeoNamedElementImpl"
    recoverWhile = program_declaration_recover
}

private program_declaration_recover ::= !<<eof>>

program_block ::= "{" program_item* "}" { pin = 1 }

private program_item ::= function_declaration
                    | inline_declaration
                    | transition_declaration
                    | struct_declaration
                    | record_declaration
                    | mapping_declaration {recoverWhile=program_item_recover}

private program_item_recover ::= !( "@" | "function" | "inline" | "struct" | "record" | "mapping" | "transition" | "}" )