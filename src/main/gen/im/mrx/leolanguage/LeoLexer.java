/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package im.mrx.leolanguage;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;

import static im.mrx.leolanguage.psi.LeoTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Leo.flex</tt>
 */
class LeoLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NUMERIC = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 5, 7]
   * Total runtime size is 1888 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>7)&0x1f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\40\1\100\12\40\1\140\2\40\u0100\200");

  /* The ZZ_CMAP_Y table has 160 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\77\1\1\2\57\1\60\3");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\41\1\1\1\2\2\41\1\2\22\41\1\1\1\45\1\40\2\41\1\45\1\46\1\42\1\54\1\55"+
    "\1\5\1\45\1\57\1\53\1\60\1\3\1\36\1\27\1\32\1\31\1\33\1\36\1\30\1\36\1\26"+
    "\1\36\1\62\1\61\1\51\1\50\1\52\1\63\1\44\32\34\1\56\1\4\1\56\1\45\1\35\1\41"+
    "\1\6\1\13\1\16\1\7\1\11\1\23\1\24\1\34\1\17\2\34\1\15\1\34\1\22\1\14\1\25"+
    "\1\34\1\10\1\12\1\21\1\20\4\34\1\37\1\43\1\47\1\43\254\41\5\0\67\41\12\0\20"+
    "\41\200\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\16\4\1\5\1\3\1\6"+
    "\1\7\1\10\1\1\6\3\2\11\1\12\1\13\1\14"+
    "\1\15\1\3\2\1\1\16\1\0\12\4\1\17\12\4"+
    "\6\0\1\20\1\21\10\0\1\22\1\0\21\4\1\0"+
    "\1\23\5\0\1\20\2\0\1\24\5\0\1\22\1\25"+
    "\10\4\1\26\4\4\11\0\5\4\1\17\3\4\7\0"+
    "\4\4\2\0\70\4\1\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\234\0\u0478"+
    "\0\234\0\234\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0"+
    "\0\u05e4\0\234\0\u0618\0\234\0\234\0\u064c\0\234\0\u0680"+
    "\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820"+
    "\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u01a0\0\u098c"+
    "\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0478\0\u0c64\0\234"+
    "\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u06b4\0\u06e8"+
    "\0\u0dd0\0\234\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08"+
    "\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8"+
    "\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\234\0\u11e0\0\u1214"+
    "\0\u1248\0\u127c\0\u12b0\0\u0478\0\u12e4\0\u1318\0\234\0\u134c"+
    "\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u06e8\0\234\0\u1450\0\u1484"+
    "\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u01a0\0\u15f0"+
    "\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790"+
    "\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930"+
    "\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0"+
    "\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70"+
    "\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10"+
    "\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0"+
    "\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150"+
    "\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0"+
    "\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490"+
    "\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630"+
    "\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0"+
    "\0\u2804\0\u2838\0\u01a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\4\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\11\1\16\1\17\1\20\1\21"+
    "\1\22\1\11\1\23\1\24\1\25\6\26\1\11\1\27"+
    "\1\26\1\11\1\30\1\4\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\34\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\27\26\4\6\51"+
    "\2\4\1\51\65\4\1\52\23\4\65\0\2\5\64\0"+
    "\1\53\1\0\1\54\42\0\1\27\20\0\1\34\42\0"+
    "\1\27\21\0\1\11\1\55\5\11\1\56\22\11\32\0"+
    "\32\11\32\0\3\11\1\57\26\11\32\0\7\11\1\60"+
    "\22\11\32\0\10\11\1\61\2\11\1\62\16\11\32\0"+
    "\6\11\1\63\23\11\32\0\3\11\1\64\26\11\32\0"+
    "\6\11\1\65\2\11\1\66\20\11\32\0\14\11\2\67"+
    "\2\11\1\67\1\70\1\71\1\72\6\11\32\0\20\11"+
    "\1\67\1\70\1\71\1\72\6\11\32\0\2\11\1\73"+
    "\27\11\32\0\1\74\5\11\1\75\2\11\1\76\1\77"+
    "\17\11\32\0\2\11\1\100\27\11\32\0\12\11\1\101"+
    "\17\11\36\0\1\102\4\0\2\103\2\0\1\104\1\105"+
    "\1\0\6\26\2\0\1\26\26\0\1\106\1\0\1\106"+
    "\1\107\33\106\1\110\23\106\6\0\20\111\6\0\1\111"+
    "\2\0\1\111\74\0\1\27\61\0\1\34\1\0\1\27"+
    "\62\0\1\34\1\27\63\0\1\27\1\34\62\0\1\27"+
    "\1\0\1\34\61\0\1\27\1\0\1\27\35\0\1\112"+
    "\117\0\1\27\65\0\1\27\13\0\1\113\4\0\2\114"+
    "\2\0\1\115\1\116\1\0\6\117\2\0\1\117\26\0"+
    "\1\120\1\0\1\120\1\121\33\120\1\122\23\120\1\0"+
    "\1\53\1\0\61\53\5\54\1\123\56\54\6\0\1\11"+
    "\1\124\30\11\32\0\3\11\1\125\26\11\32\0\10\11"+
    "\1\126\2\11\1\127\16\11\32\0\4\11\1\130\25\11"+
    "\32\0\1\131\31\11\32\0\2\11\1\132\27\11\32\0"+
    "\6\11\1\133\23\11\32\0\13\11\1\67\16\11\32\0"+
    "\14\11\1\134\15\11\32\0\2\11\1\135\27\11\32\0"+
    "\22\11\1\67\1\11\1\136\5\11\32\0\25\11\1\67"+
    "\4\11\32\0\24\11\1\67\5\11\32\0\12\11\1\137"+
    "\17\11\32\0\7\11\1\140\22\11\32\0\2\11\1\67"+
    "\27\11\32\0\3\11\1\141\26\11\32\0\14\11\1\142"+
    "\15\11\32\0\6\11\1\143\23\11\32\0\5\11\1\144"+
    "\24\11\42\0\1\145\73\0\1\146\1\147\1\150\1\151"+
    "\51\0\1\152\54\0\1\153\54\0\1\106\1\0\1\106"+
    "\1\107\33\106\1\154\23\106\6\0\32\111\34\0\1\155"+
    "\71\0\1\156\73\0\1\157\1\160\1\161\1\162\51\0"+
    "\1\163\54\0\1\164\54\0\1\120\1\0\1\120\1\121"+
    "\33\120\1\165\23\120\3\54\1\166\60\54\6\0\2\11"+
    "\1\167\27\11\32\0\6\11\1\170\23\11\32\0\6\11"+
    "\1\171\23\11\32\0\12\11\1\172\17\11\32\0\3\11"+
    "\1\67\26\11\32\0\7\11\1\173\22\11\32\0\11\11"+
    "\1\174\20\11\32\0\7\11\1\67\22\11\32\0\4\11"+
    "\1\175\25\11\32\0\10\11\1\176\21\11\32\0\20\11"+
    "\1\67\11\11\32\0\3\11\1\177\26\11\32\0\4\11"+
    "\1\137\25\11\32\0\7\11\1\200\22\11\32\0\10\11"+
    "\1\201\21\11\32\0\12\11\1\202\17\11\32\0\7\11"+
    "\1\203\22\11\32\0\1\204\105\0\1\146\1\0\1\205"+
    "\64\0\1\146\62\0\1\146\42\0\1\206\66\0\1\207"+
    "\63\0\1\210\55\0\1\211\105\0\1\157\1\0\1\212"+
    "\64\0\1\157\62\0\1\157\42\0\1\213\66\0\1\214"+
    "\55\0\3\11\1\215\26\11\32\0\21\11\1\216\10\11"+
    "\32\0\2\11\1\200\27\11\32\0\2\11\1\217\27\11"+
    "\32\0\1\75\31\11\32\0\14\11\1\220\15\11\32\0"+
    "\6\11\1\221\4\11\1\222\16\11\32\0\12\11\1\223"+
    "\17\11\32\0\1\11\1\67\30\11\32\0\13\11\1\224"+
    "\16\11\32\0\17\11\1\67\12\11\32\0\11\11\1\225"+
    "\20\11\41\0\1\226\74\0\1\146\52\0\1\227\66\0"+
    "\1\230\63\0\1\231\60\0\1\232\74\0\1\157\52\0"+
    "\1\233\66\0\1\234\51\0\4\11\1\235\25\11\32\0"+
    "\1\236\17\11\6\236\1\11\3\236\32\0\14\11\1\67"+
    "\15\11\32\0\16\11\1\67\13\11\32\0\7\11\1\130"+
    "\22\11\32\0\1\237\31\11\32\0\11\11\1\64\20\11"+
    "\32\0\11\11\1\240\20\11\32\0\10\11\1\67\21\11"+
    "\32\0\1\241\64\0\1\146\101\0\1\146\63\0\1\27"+
    "\44\0\1\242\64\0\1\157\101\0\1\157\44\0\4\11"+
    "\1\67\25\11\32\0\1\243\17\11\6\243\1\11\3\243"+
    "\32\0\14\11\1\64\15\11\32\0\6\11\1\217\23\11"+
    "\34\0\1\146\63\0\1\157\61\0\1\244\17\11\6\244"+
    "\1\11\3\244\32\0\1\245\17\11\6\245\1\11\3\245"+
    "\32\0\1\246\17\11\6\246\1\11\3\246\32\0\1\247"+
    "\17\11\6\247\1\11\3\247\32\0\1\250\17\11\6\250"+
    "\1\11\3\250\32\0\1\251\17\11\6\251\1\11\3\251"+
    "\32\0\1\252\17\11\6\252\1\11\3\252\32\0\1\253"+
    "\17\11\6\253\1\11\3\253\32\0\1\254\17\11\6\254"+
    "\1\11\3\254\32\0\1\255\17\11\6\255\1\11\3\255"+
    "\32\0\1\256\17\11\6\256\1\11\3\256\32\0\1\257"+
    "\17\11\6\257\1\11\3\257\32\0\1\260\17\11\6\260"+
    "\1\11\3\260\32\0\1\261\17\11\6\261\1\11\3\261"+
    "\32\0\1\262\17\11\6\262\1\11\3\262\32\0\1\263"+
    "\17\11\6\263\1\11\3\263\32\0\1\264\17\11\6\264"+
    "\1\11\3\264\32\0\1\265\17\11\6\265\1\11\3\265"+
    "\32\0\1\266\17\11\6\266\1\11\3\266\32\0\1\267"+
    "\17\11\6\267\1\11\3\267\32\0\1\270\17\11\6\270"+
    "\1\11\3\270\32\0\1\271\17\11\6\271\1\11\3\271"+
    "\32\0\1\272\17\11\6\272\1\11\3\272\32\0\1\273"+
    "\17\11\6\273\1\11\3\273\32\0\1\274\17\11\6\274"+
    "\1\11\3\274\32\0\1\275\17\11\6\275\1\11\3\275"+
    "\32\0\1\276\17\11\6\276\1\11\3\276\32\0\1\277"+
    "\17\11\6\277\1\11\3\277\32\0\1\300\17\11\6\300"+
    "\1\11\3\300\32\0\1\301\17\11\6\301\1\11\3\301"+
    "\32\0\1\302\17\11\6\302\1\11\3\302\32\0\1\303"+
    "\17\11\6\303\1\11\3\303\32\0\1\304\17\11\6\304"+
    "\1\11\3\304\32\0\1\305\17\11\6\305\1\11\3\305"+
    "\32\0\1\306\17\11\6\306\1\11\3\306\32\0\1\307"+
    "\17\11\6\307\1\11\3\307\32\0\1\310\17\11\6\310"+
    "\1\11\3\310\32\0\1\311\17\11\6\311\1\11\3\311"+
    "\32\0\1\312\17\11\6\312\1\11\3\312\32\0\1\313"+
    "\17\11\6\313\1\11\3\313\32\0\1\314\17\11\6\314"+
    "\1\11\3\314\32\0\1\315\17\11\6\315\1\11\3\315"+
    "\32\0\1\316\17\11\6\316\1\11\3\316\32\0\1\317"+
    "\17\11\6\317\1\11\3\317\32\0\1\320\17\11\6\320"+
    "\1\11\3\320\32\0\1\321\17\11\6\321\1\11\3\321"+
    "\32\0\1\322\17\11\6\322\1\11\3\322\32\0\1\323"+
    "\17\11\6\323\1\11\3\323\32\0\1\324\17\11\6\324"+
    "\1\11\3\324\32\0\1\325\17\11\6\325\1\11\3\325"+
    "\32\0\1\326\17\11\6\326\1\11\3\326\32\0\1\327"+
    "\17\11\6\327\1\11\3\327\32\0\1\330\17\11\6\330"+
    "\1\11\3\330\32\0\1\331\17\11\6\331\1\11\3\331"+
    "\32\0\1\332\17\11\6\332\1\11\3\332\32\0\1\333"+
    "\17\11\6\333\1\11\3\333\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10348];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\22\1\1\11\1\1\2\11\7\1\1\11"+
    "\1\1\2\11\1\1\1\11\4\1\1\0\25\1\6\0"+
    "\1\11\1\1\10\0\1\11\1\0\21\1\1\0\1\11"+
    "\5\0\1\1\2\0\1\11\5\0\1\1\1\11\15\1"+
    "\11\0\11\1\7\0\4\1\2\0\71\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LeoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 24: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 25: break;
          case 3: 
            { return SYMBOL;
            } 
            // fall through
          case 26: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 27: break;
          case 5: 
            { yybegin(NUMERIC);
            } 
            // fall through
          case 28: break;
          case 6: 
            { yybegin(STRING); return DOUBLE_QUOTE;
            } 
            // fall through
          case 29: break;
          case 7: 
            { return SINGLE_QUOTE;
            } 
            // fall through
          case 30: break;
          case 8: 
            { return BRACES;
            } 
            // fall through
          case 31: break;
          case 9: 
            { return PARENS;
            } 
            // fall through
          case 32: break;
          case 10: 
            { return BRACKETS;
            } 
            // fall through
          case 33: break;
          case 11: 
            { return COMMA;
            } 
            // fall through
          case 34: break;
          case 12: 
            { return DOT;
            } 
            // fall through
          case 35: break;
          case 13: 
            { return SEMICOLON;
            } 
            // fall through
          case 36: break;
          case 14: 
            { return END_OF_LINE_COMMENT;
            } 
            // fall through
          case 37: break;
          case 15: 
            { return KEYWORD;
            } 
            // fall through
          case 38: break;
          case 16: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 39: break;
          case 17: 
            { return ANNOTATION;
            } 
            // fall through
          case 40: break;
          case 18: 
            { yybegin(YYINITIAL); return STRING_LITERAL;
            } 
            // fall through
          case 41: break;
          case 19: 
            { return NUMERIC_LITERAL;
            } 
            // fall through
          case 42: break;
          case 20: 
            { yybegin(YYINITIAL); return NUMERIC_LITERAL;
            } 
            // fall through
          case 43: break;
          case 21: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 44: break;
          case 22: 
            { return BOOLEAN_LITERAL;
            } 
            // fall through
          case 45: break;
          case 23: 
            { return ADDRESS_LITERAL;
            } 
            // fall through
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
